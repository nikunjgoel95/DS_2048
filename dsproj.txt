#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
#include<graphics.h>
#include<string.h>
#include<math.h>
#include<dos.h>
#define midx getmaxx()/2
#define midy getmaxy()/2
#define WBC 5
int X=300,Y=200;

typedef struct linklist
{
	int data;
	int location;
	struct linklist *down,*left,*right,*up;

} ll;

ll *head=NULL,*end=NULL,*temp=NULL,*P,*head1=NULL,*end1=NULL,*temp1,*p,*p1,*p2,*p3,*p4,*stU,*stD,*stL,*stR;

union REGS i, o;

void create();
int no_random();
int index();
int tile_color(int,int);
int arrow();
void move_up(ll *);
void move_down(ll *);
void move_left(ll *);
void move_right(ll *);
int display();
void load();
void sechand(int);
void screen();
void abt_us();
void instr();
void cntrl();
int game_end();
int scoreboard(int,int);


int initmouse()
{
   i.x.ax = 0;
   int86(0X33,&i,&o);
   return ( o.x.ax );
}

void showmouseptr()
{
   i.x.ax = 1;
   int86(0X33,&i,&o);
}

void hidemouseptr()
{
   i.x.ax = 2;
   int86(0X33,&i,&o);
}

void getmousepos(int *button, int *x, int *y)
{
   i.x.ax = 3;
   int86(0X33,&i,&o);

   *button = o.x.bx;
   *x = o.x.cx;
   *y = o.x.dx;
}

void restrictmouseptr(int x1, int y1, int x2, int y2)
{
   i.x.ax = 7;
   i.x.cx = x1;
   i.x.dx = x2;
   int86(0X33,&i,&o);

   i.x.ax = 8;
   i.x.cx = y1;
   i.x.dx = y2;
   int86(0X33,&i,&o);
}

void main()
{
	int gdriver=DETECT,gmode;
	int i,count,adn;
	initgraph(&gdriver,&gmode,"..\\bgi");
	load();
	screen();
	getch();
}

void create()
{
	int i;
	for(i=0;i<4;i++)
	{
		temp=(ll*)malloc(sizeof(ll));
		temp->data=0;
		temp->right=temp->left=temp->up=temp->down=NULL;
		if(head==NULL)
		{
			head=temp;
			end=temp;
		}
		else
		{
			end->down=temp;
			temp->up=end;
			end=temp;
		}
	}
	p=head;
	while(p!=NULL)
	{
		for(i=0;i<3;i++)
		{
			temp1=(ll*)malloc(sizeof(ll));
			temp1->right=temp1->left=temp1->up=temp1->down=NULL;
			temp1->data=0;
			if(head1==NULL)
			{
				p->right=temp1;
				temp1->left=p;
				head1=temp1;
				end1=temp1;
			}
			else
			{
				end1->right=temp1;
				temp1->left=end1;
				end1=temp1;
			}
		}
		p=p->down;
		head1=NULL;
	}
	p1=head;
	while(p1->down!=NULL)
	{
		p2=p1->right;
		p3=p1->down->right;
		while(p2!=NULL)
		{
			p2->down=p3;
			p3->up=p2;
			p2=p2->right;
			p3=p3->right;
		}
		p1=p1->down;
	}
}
int display()
{

	setviewport(midx-125, midy-100, midx+125,midy+150,1);
	setfillstyle(1,8);
	bar(0,0,250,250);
	setfillstyle(1,7);
	bar(5,5,245,245);


	temp1=head;
	while(temp1!=NULL)
	{
		temp=temp1;
		while(temp!=NULL)
		{
			tile_color(temp->data,temp->location);
			temp=temp->right;
		}
		temp1=temp1->down;
	}
	return 0;
}
int tile_color(int data,int location)
{
	int fillstyle;
	char disp[6];
	switch(data)
	{
		case 0:fillstyle=15;
			strcpy(disp,"");
			break;
		case 2:fillstyle=6;
			strcpy(disp,"2");
			break;
		case 4:fillstyle=10;
			strcpy(disp,"4");
			break;
		case 8:fillstyle=12;
			strcpy(disp,"8");
			break;
		case 16:fillstyle=14;
			strcpy(disp,"16");
			break;
		case 32:fillstyle=13;
			strcpy(disp,"32");
			break;
		case 64:fillstyle=6;
			strcpy(disp,"64");
			break;
		case 128:fillstyle=3;
			strcpy(disp,"128");
			break;
		case 256:fillstyle=9;
			strcpy(disp,"256");
			break;
		case 512:fillstyle=2;
			strcpy(disp,"512");
			break;
		case 1024:fillstyle=5;
			strcpy(disp,"1024");
			break;
		case 2048:fillstyle=4;
			strcpy(disp,"2048");
	}
	setfillstyle(1,fillstyle);
	settextstyle(DEFAULT_FONT,HORIZ_DIR,1);
	switch(location)
	{
		case 1:bar(13, 13, 63,63);
			outtextxy(38,38,disp);
			break;
		case 2:bar(71, 13, 121,63);
			outtextxy(88,38,disp);
			break;
		case 3:bar(129, 13, 179,63);
			outtextxy(138,38,disp);
			break;
		case 4:bar(187, 13, 237,63);
			outtextxy(188,38,disp);
			break;
		case 5:bar(13, 71, 63,121);
			outtextxy(38,88,disp);
			break;
		case 6:bar(71, 71, 121,121);
			outtextxy(88,88,disp);
			break;
		case 7:bar(129, 71, 179,121);
			outtextxy(138,88,disp);
			break;
		case 8:bar(187, 71, 237,121);
			outtextxy(188,88,disp);
			break;
		case 9:bar(13, 129,63,179);
			outtextxy(38,138,disp);
			break;
		case 10:bar(71, 129, 121,179);
			outtextxy(88,138,disp);
			break;
		case 11:bar(129, 129, 179,179);
			outtextxy(138,138,disp);
			break;
		case 12:bar(187, 129, 237,179);
			outtextxy(188,138,disp);
			break;
		case 13:bar(13, 187, 63,237);
			outtextxy(38,188,disp);
			break;
		case 14:bar(71, 187, 121,237);
			outtextxy(88,188,disp);
			break;
		case 15:bar(129, 187, 179,237);
			outtextxy(138,188,disp);
			break;
		case 16:bar(187, 187, 237,237);
			outtextxy(188,188,disp);
			break;
	}
	return 0;
}
void sechand(int t)
{
	int x1,y1;
	setlinestyle(0,0,3);

	x1= X+(50 * cos(t*0.1047));
	y1= Y+(50 * sin(t*0.1047));

	setcolor(RED);
	line(X, Y, x1, y1);
	setcolor(WBC+1);
	line(X, Y, X+ 50 * cos((t-1)*0.1047),Y+ 50 * sin((t-1)*0.1047));
	circle(X,Y,4);
}

void  load()
{
	int t;
	int adn;
	float octave[7]={130.81,146.83,164.81,174.61,196.220,246.94};
	setbkcolor(BLACK);
	settextstyle(DEFAULT_FONT,HORIZ_DIR,5);
	setcolor(3);
	outtextxy(180,100,"WELCOME");
	settextstyle(DEFAULT_FONT,HORIZ_DIR,3);
	setcolor(WHITE);
	outtextxy(midx-90,midy+50,"LOADING");
	settextstyle(DEFAULT_FONT,HORIZ_DIR,5);
	setcolor(RED);
	outtextxy(midx-85,midy+80,"2048");

	for(t=0;t<61;t++)
	{

		adn=random(7);
		sound(octave[adn]*10);
		sechand(t);
		delay(85);
		nosound();
	}
	cleardevice();
}

void screen()
{
	char press;
	int stangle =0, endangle =90,size=5,button=-1,x,y,status,i;
	int xradius = 150;//yradius=100;
	cleardevice();
	setcolor(RED);
	// GAME SCREEN
	circle(midx,midy,xradius);
	setfillstyle(1,11);
	pieslice(midx,midy,stangle,endangle,xradius);
	setfillstyle(1,11);
	pieslice(midx,midy,90,180,xradius);
	setfillstyle(1,11);
	pieslice(midx,midy,180,270,xradius);
	setfillstyle(1,11);
	pieslice(midx,midy,270,360,xradius);

	setcolor(RED);
	line(midx-xradius,midy,midx+xradius,midy);
	line(midx,midy-xradius,midx,midy+xradius);
	settextstyle(DEFAULT_FONT,HORIZ_DIR,1);
	outtextxy(midx+50,midy-50,"ABOUT US");
	outtextxy(midx+50,midy+50,"CONTROLS");
	outtextxy(midx-100,midy-50,"PLAY");
	outtextxy(midx-120,midy+50,"INSTRUCTIONS");
	setcolor(RED);
	outtextxy(midx+200,midy+200,"EXIT");
	rectangle(midx+190,midy+190,midx+240,midy+220);
	for(i=2;i<5;i++)
	{
		setcolor(i);
		settextstyle(DEFAULT_FONT,HORIZ_DIR,size);
		outtextxy(midx-80,midy-200,"2048");
		delay(1000);
	}
	status=initmouse();
	if ( status == 0 )
	{
		cleardevice();
		printf("Mouse support not available.\n");
	}
	else
	{
		showmouseptr();
		getmousepos(&button,&x,&y);
		while(!kbhit())
		{
			getmousepos(&button,&x,&y);
			if(button==1)
			{
				if(x<(midx+xradius)&&x>midx&&y>(midy-xradius)&&y<midy)
				{
					hidemouseptr();
					cleardevice();
					abt_us();
				}
				else if(x>midx&&x<(midx+xradius)&&y<(midy+xradius)&&y>midy)
				{
					hidemouseptr();
					cleardevice();
					cntrl();
				}
				else if(x>(midx-xradius)&&x<midx&&y<midy&&y>(midy-xradius))
				{
					hidemouseptr();
					cleardevice();
					arrow();
				}
				else if(x<midx&x>(midx-xradius)&&y>midy&&y<(midy+xradius))
				{
					hidemouseptr();
					cleardevice();
					instr();
				}
				else if(x<(midx+240)&&x>(midx+190)&&y<(midy+220)&&y>(midy+190))
				{
					exit(0);
				}
				button=-1;
			}
		}
	}
	hidemouseptr();
	cleardevice();
}

int arrow(int mode)
{
	char press;
	int i,status=-2,flag=0;
	int score=0;

	initmouse();
	hidemouseptr();

	// Create multi link list
	create();
	index();

	setviewport(midx-125, midy-100, midx+125,midy+150,1);
	setfillstyle(1,8);
	bar(0,0,250,250);
	setfillstyle(1,7);
	bar(5,5,245,245);


	//Traversal of multi link list
	for(i=0;i<2;i++)
		no_random();
	display();
	_setcursortype(_NOCURSOR);

	stU=head;
	stD=head->down->down->down;
	stL=head;
	stR=head->right->right->right;

	do{
		if(kbhit())
		{
			press=getch();
			status=game_end();
			if(status==0)
			{
			//up arrow keY
			if(press==72)
			{
				flag=0;
				p1=stU;
				while(p1!=NULL)
				{
					p2=p1;
					p3=p1;
					while(p2!=NULL)
					{
						if(p2->data==0)
						{
							move_up(p2);
						}
						p2=p2->down;
					}
					while(p3->down->data!=0)
					{
						if(p3->data==p3->down->data)
						{
							p3->data=(p3->data)*2;
							p3->down->data=0;
							score=score+(p3->data);
							move_up(p3->down);
							flag=1;
						}
						p3=p3->down;
					}
					p1=p1->right;
				}
				clearviewport();
				display();
				delay(200);
				clearviewport();
				no_random();
				display();
			}

			//down arrow keY
			if(press==80)
			{
				flag=0;
				p1=stD;
				while(p1!=NULL)
				{
					p2=p1;
					p3=p1;
					while(p2!=NULL)
					{
						if(p2->data==0)
						{
							move_down(p2);
						}
						p2=p2->up;
					}
					while(p3->up->data!=0)
					{
						if(p3->data==p3->up->data)
						{
							p3->data=(p3->data)*2;
							p3->up->data=0;
							score=score+(p3->data);
							move_down(p3->up);
							flag=1;
						}
						p3=p3->up;
					}
					p1=p1->right;
				}
				clearviewport();
				display();
				delay(200);
				clearviewport();
				no_random();
				display();
			}

			//lEfT aRrOw KeY
			if(press==75)
			{
				flag=0;
				p1=stL;
				while(p1!=NULL)
				{
					p2=p1;
					p3=p1;
					while(p2!=NULL)
					{
						if(p2->data==0)
						{
							move_left(p2);
						}
						p2=p2->right;
					}
					while(p3->right->data!=0)
					{
						if(p3->data==p3->right->data)
						{
							p3->data=(p3->data)*2;
							p3->right->data=0;
							score=score+(p3->data);
							move_left(p3->right);
							flag=1;
						}
						p3=p3->right;
					}
					p1=p1->down;
				}
				clearviewport();
				display();
				delay(200);
				clearviewport();
				no_random();
				display();
			}

			//RiGhT aRrOw KeY
			if(press==77)
			{
				flag=0;
				p1=stR;
				while(p1!=NULL)
				{
					p2=p1;
					p3=p1;
					while(p2!=NULL)
					{
						if(p2->data==0)
						{
							move_right(p2);
						}
						p2=p2->left;
					}
					while(p3->left->data!=0)
					{
						if(p3->data==p3->left->data)
						{
							p3->data=(p3->data)*2;
							p3->left->data=0;
							score=score+(p3->data);
							move_right(p3->left);
							flag=1;
						}
						p3=p3->left;
					}
					p1=p1->down;
				}
				clearviewport();
				display();
				delay(200);
				clearviewport();
				no_random();
				display();
			}
			}
			else if(status==1)
			{
				press=27;
			}
			else if(status==-1)
			{
				press=27;
			}

		}
	}while(press!=27);

	clearviewport();
	setviewport(midx-125, midy-100, midx+125,midy+150,0);
	setviewport(0, 0, getmaxx(),getmaxy(),1);

	cleardevice();
	scoreboard(score,status);
	return 0;
}

void move_up(ll *P)
{
	while(P->down!=NULL)
	{
		P->data=P->down->data;
		P->down->data=0;
		if(P->data==0)
		{
			P->data=P->down->down->data;
			P->down->down->data=0;
			if(P->data==0)
			{
				P->data=P->down->down->down->data;
				P->down->down->down->data=0;
			}
		}
		P=P->down;
	}
}

void move_down(ll *P)
{
	while(P->up!=NULL)
	{
		P->data=P->up->data;
		P->up->data=0;
		if(P->data==0)
		{
			P->data=P->up->up->data;
			P->up->up->data=0;
			if(P->data==0)
			{
				P->data=P->up->up->up->data;
				P->up->up->up->data=0;
			}
		}
		P=P->up;
	}
}

void move_left(ll *P)
{
	while(P->right!=NULL)
	{
		P->data=P->right->data;
		P->right->data=0;
		if(P->data==0)
		{
			P->data=P->right->right->data;
			P->right->right->data=0;
			if(P->data==0)
			{
				P->data=P->right->right->right->data;
				P->right->right->right->data=0;
			}
		}
		P=P->right;
	}
}

void move_right(ll *P)
{
	while(P->left!=NULL)
	{
		P->data=P->left->data;
		P->left->data=0;
		if(P->data==0)
		{
			P->data=P->left->left->data;
			P->left->left->data=0;
			if(P->data==0)
			{
				P->data=P->left->left->left->data;
				P->left->left->left->data=0;
			}
		}
		P=P->left;
	}
}

int no_random()
{
	int a[]={2,2,2,2,2,2,2,2,2,4};
	int l;
	int flag=0;
	randomize();
	label:l=random(16)+1;
	temp1=head;
	while(temp1!=NULL)
	{
		temp=temp1;
		while(temp!=NULL)
		{
			if(temp->location==l)
			{
				if(temp->data==0)
				{
					temp->data=a[random(10)];
					flag=1;
					break;
				}
			}
			temp=temp->right;
		}
		temp1=temp1->down;
	}
	if(flag==0)
		goto label;
	return 0;
}

int index()
{
	int L=1;
	temp1=head;
	while(temp1!=NULL)
	{
		temp=temp1;
		while(temp!=NULL)
		{
			temp->location=L;
			L++;
			temp=temp->right;
		}
		temp1=temp1->down;
	}
	return 0;
}

int game_end()
{
	int status=-2,flag=0;
	temp1=head;
	while(temp1!=NULL)
	{
		temp=temp1;
		while(temp!=NULL)
		{
			if(temp->data==2048)
			{
				status=1;
				break;
			}
			if(temp->data==temp->right->data||temp->data==temp->down->data||temp->data==0)
			{
				flag=1;
			}
			temp=temp->right;
		}
		if(status==1)
			break;
		temp1=temp1->down;
	}
	if(flag==1&&status==-2)
		status=0;
	else if(flag==0&&status==-2)
		status=-1;
	return status;
}

int scoreboard(int score,int status)
{
	int x,y,button;
	char a[7];
	cleardevice();
	setbkcolor(11);
	setfillstyle(1,8);
	settextstyle(TRIPLEX_FONT, HORIZ_DIR, 6);
	setcolor(RED);
	outtextxy(midx-140,80,"SCOREBOARD");
	settextstyle(DEFAULT_FONT, HORIZ_DIR, 1);
	setcolor(RED);
	outtextxy(midx-60,midy+80,"   YOU LOSE !!! ");
	if(status==1)
	{
		setcolor(RED);
		outtextxy(midx-60,midy+80,"   YOU WIN !!! ");
	}
	else if(status==-1)
	{
		setcolor(RED);
		outtextxy(midx-60,midy+80,"   YOU LOSE !!! ");
	}

	setfillstyle(1,8);
	setcolor(RED);
	fillellipse(midx-50,midy-15,15,15);
	fillellipse(midx+50,midy-15,15,15);
	setfillstyle(1,3);
	setfillstyle(1,3);
	bar(midx-48, midy-28, midx+48,midy-2);
	setcolor(3);
	fillellipse(midx-48,midy-15,13,13);
	fillellipse(midx+48,midy-15,13,13);
	setcolor(RED);
	outtextxy(midx-40,midy-17,"YOUR SCORE :");

	setfillstyle(1,8);
	setcolor(RED);
	fillellipse(midx-50,midy+20,15,15);
	fillellipse(midx+50,midy+20,15,15);
	setfillstyle(1,3);
	setfillstyle(1,3);
	bar(midx-48, midy+7, midx+48,midy+33);
	setcolor(3);
	fillellipse(midx-48,midy+20,13,13);
	fillellipse(midx+48,midy+20,13,13);
	setcolor(15);
	gcvt(score,7,a);
	setcolor(RED);
	outtextxy(midx-20,midy+18,a);
	getch();

	return 0;
}
void abt_us()
{

	cleardevice();
	setcolor(14);
	settextstyle(DEFAULT_FONT,HORIZ_DIR,4);
	outtextxy(70,75,"CoDE");
	settextstyle(DEFAULT_FONT,HORIZ_DIR,5);
	outtextxy(195,70,"X");

	settextstyle(DEFAULT_FONT,HORIZ_DIR,3);
	outtextxy(230,80,"Game Presents");
	setcolor(RED);
	settextstyle(DEFAULT_FONT,HORIZ_DIR,4);
	outtextxy(240,150,"2");
	setcolor(9);
	settextstyle(DEFAULT_FONT,HORIZ_DIR,4);
	outtextxy(282,150,"0");
	setcolor(14);
	settextstyle(DEFAULT_FONT,HORIZ_DIR,4);
	outtextxy(324,150,"4");
	setcolor(15);
	settextstyle(DEFAULT_FONT,HORIZ_DIR,4);
	outtextxy(366,150,"8");
	setcolor(6);
	settextstyle(DEFAULT_FONT,HORIZ_DIR,3);
	outtextxy(100,250,"BY :");
	setcolor(9);
	settextstyle(DEFAULT_FONT,HORIZ_DIR,2);
	outtextxy(220,250,"NIKUNJ GOEL   > 14104056");
	settextstyle(DEFAULT_FONT,HORIZ_DIR,2);
	outtextxy(220,280,"SAURAV SINGH  > 14104046");
	settextstyle(DEFAULT_FONT,HORIZ_DIR,2);
	outtextxy(220,310,"SHREYA MISRA  > 14104058");
	settextstyle(DEFAULT_FONT,HORIZ_DIR,2);
	outtextxy(220,340,"VASUNDHARA    > 14104051");
	getch();
	cleardevice();
	screen();
	setcolor(WHITE);
}
void instr()
{
	int size=3;
	cleardevice();
	setfillstyle(1,9);
	setcolor(BLUE);
	bar(100,100,500,400);
	settextstyle(DEFAULT_FONT,HORIZ_DIR,size);
	outtextxy(175,120,"INSTRUCTIONS");
	settextstyle(DEFAULT_FONT,HORIZ_DIR,1);
	setcolor(BLACK);
	{
	outtextxy(110,150,"The game uses the arrow keys to move tiles left");
	outtextxy(110,170,"            right, up, and down.");

	outtextxy(110,190," If two tiles of the same number collide while");
	outtextxy(110,210,"  moving, they will merge into a tile with the");
	outtextxy(110,230,"   total value of the two tiles that collided. ");



	outtextxy(110,250, "A new tile will randomly appear in an empty ");
	outtextxy(110,270,"spot on the board with a value of either 2 or 4.");


	outtextxy(110,290,"The game is won when a tile with a value of'2048'");
	outtextxy(110,310,"appears on the board, hence the name of the game");
	}
	getch();
	cleardevice();
	screen();
}
void cntrl()
{
	int midx1,midy1,i;
	midx1=getmaxx()/2-150;
	midy1=getmaxy()/2;

	settextstyle(DEFAULT_FONT,HORIZ_DIR,1);
	for(i=1;i<4;i++)
	{
		setcolor(3);
		rectangle(midx1+i*60,midy1,midx1+i*60+50,midy1+50);
		if(i==1)
		{
			outtextxy(midx1+i*60+25,midy1+25,"<-");
			outtextxy(midx1+i*60,midy1+70,"LEFT");
		}
		if(i==2)
		{
			outtextxy(midx1+i*60+25,midy1+28,"V");
			outtextxy(midx1+i*60+25,midy1+18,"|");
			outtextxy(midx1+i*60+10,midy1+70,"DOWN");

		}
		else if(i==3)
		{
			outtextxy(midx1+i*60+25,midy1+25,"->");
			outtextxy(midx1+i*60+10,midy1+70,"RIGHT");
		}
	}
	rectangle(midx1+120,midy1-60,midx1+170,midy1-10);
	outtextxy(midx1+140,midy1-35,"^");
	outtextxy(midx1+140,midy1-30,"|");
	outtextxy(midx1+140,midy1-75,"UP");
	getch();
	cleardevice();
	screen();
}


